name: 'Build LaTeX document'
description: 'Build and publish LaTeX document'
inputs:

  sources:
    description: 'List of tex files to be built'
    required: 'true'

  working_directory:
    description: 'The working directory for building tex files'
    default: '.'

  latexmk_use_xelatex:
    description: Instruct latexmk to use XeLaTeX
    default: 'false'

  document_filename:
    description: 'The name of the built document file (usually ends with)'

  github_token:
    description: A github token that has write access to the repo where the tag is.
    required: 'true'
    default: ${{ github.token }}

  draft:
    description: 'Publish the release (false) or only draft (true)'
    default: 'false'

  tag_prefix:
    description: 'Prefix used for tags (prepended to branch name)'

  tag_suffix:
    description: 'Suffix used for tags (appended to branch name)'

runs:

  using: "composite"
  steps:

    - name: Build LaTeX document parts
      uses: xu-cheng/latex-action@v3
      with:
        root_file: ${{ inputs.sources }}
        working_directory: ${{ inputs.working_directory }}
        latexmk_use_xelatex: ${{ inputs.latexmk_use_xelatex }}

    - name: Upload LaTeX document
      uses: actions/upload-artifact@v4
      id: document-upload-step
      with:
        name: document
        path: ${{ inputs.working_directory }}/${{ inputs.document_filename }}

    - name: Paste document download link into pull request
      uses: actions/github-script@v3
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ inputs.github_token }}
        script: |
          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'Document built successfully: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.document-upload-step.outputs.artifact-id }}'
          })

    - name: Gather information for release
      if: github.event_name == 'push'
      id: gather_info
      shell: python
      env:
        GITHUB_REF_NAME: ${{ github.ref-name }}
        TAG_PREFIX: ${{ inputs.tag_prefix }}
        TAG_SUFFIX: ${{ inputs.tag_suffix }}
      run: |
        import os
        branch = os.environ['GITHUB_REF_NAME']
        tag_prefix = os.environ['TAG_PREFIX']
        tag_suffix = os.environ['TAG_SUFFIX']
        prerelease = branch.startswith('future/')
        with open(os.environ['GITHUB_OUTPUT'], "a") as fp:
          print(f'prerelease={str(prerelease).lower()}', file=fp)
          print(f'tag_name={tag_prefix}{branch}{tag_suffix}', file=fp)

    - name: Delete previous release (if any)
      if: github.event_name == 'push'
      uses: dev-drprasad/delete-tag-and-release@v1.0
      with:
        github_token: ${{ inputs.github_token }}
        tag_name: ${{ steps.gather_info.outputs.tag_name }}
        delete_release: true

    - name: Create release
      if: github.event_name == 'push'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        tag_name: ${{ steps.gather_info.outputs.tag_name }}
        release_name: ${{ steps.gather_info.outputs.tag_name }}
        draft: ${{ inputs.draft }}
        prerelease: ${{ steps.gather_info.outputs.prerelease }}

    - name: Upload release asset
      if: github.event_name == 'push'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github_token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ inputs.working_directory }}/${{ inputs.document_filename }}
        asset_name: ${{ inputs.document_filename }}
        asset_content_type: pdf
